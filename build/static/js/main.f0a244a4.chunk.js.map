{"version":3,"sources":["helper.js","components/Dialog.js","components/CreateRoomForm.js","components/CreatePrivateRoomForm.js","components/RoomList.js","components/ChatSession.js","components/RoomUsers.js","App.js","serviceWorker.js","index.js"],"names":["sendMessage","event","preventDefault","this","state","newMessage","currentUser","currentRoom","trim","text","roomId","id","setState","toggleShow","showForm","toggleShowDmList","showDmList","console","log","ShowDmList","handleInput","undefined","target","userIds","value","name","connectToRoom","messages","subscribeToRoom","messageLimit","hooks","onMessage","message","onPresenceChanged","roomUsers","users","sort","a","presence","then","roomName","customData","isDirectMessage","filter","rooms","catch","error","connectToChatkit","userId","isLoading","axios","post","user_list","data","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","connect","onAddedToRoom","room","showLogin","call","alert","createPrivateRoom","isPrivateChatCreated","arr","join","length","Promise","resolve","createRoom","private","addUserIds","createGroupRoom","channelName","ids","concat","sendDM","sendGroupMessage","Dialog","props","className","onSubmit","htmlFor","autoFocus","type","onChange","placeholder","CreateRoomForm","options","map","user","onSelectOptions","onClick","CreatePrivateRoomForm","dmUser","key","title","RoomList","groupRoomList","privateChatRoomList","forEach","roomIcon","isPrivate","isRoomActive","chat_list_name","push","ChatSession","time","format","Date","updatedAt","senderId","RoomUsers","App","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUAGA,SAASA,EAAYC,GACnBA,EAAMC,iBADoB,MAEuBC,KAAKC,MAA9CC,EAFkB,EAElBA,WAAYC,EAFM,EAENA,YAAaC,EAFP,EAEOA,YAEP,KAAtBF,EAAWG,SAEfF,EAAYN,YAAY,CACtBS,KAAMJ,EACNK,OAAO,GAAD,OAAKH,EAAYI,MAGzBR,KAAKS,SAAS,CACZP,WAAY,MAIhB,SAASQ,IAAa,IACbC,EAAYX,KAAKC,MAAjBU,SACPX,KAAKS,SAAS,CACZE,UAAWA,IAIf,SAASC,IAAmB,IACnBD,EAAYX,KAAKC,MAAjBU,SACPX,KAAKS,SAAS,CACZI,YAAaF,IAEfG,QAAQC,IAAIf,KAAKgB,YAGnB,SAASC,EAAYnB,GACnB,QAAoBoB,IAAjBpB,EAAMqB,OACPL,QAAQC,IAAIjB,GACZE,KAAKS,SAAS,CACZW,QAAStB,QAER,CAAC,IAAD,EACqBA,EAAMqB,OAAtBE,EADL,EACKA,MAAOC,EADZ,EACYA,KACftB,KAAKS,SAAL,eACGa,EAAOD,KAKd,SAASE,IAA4D,IAAD,OAA7Cf,EAA6C,uDAAxC,uCAClBL,EAAgBH,KAAKC,MAArBE,YAQR,OANAH,KAAKS,SAAS,CACZe,SAAU,GACVb,UAAU,EACVE,YAAY,IAGPV,EACJsB,gBAAgB,CACflB,OAAO,GAAD,OAAKC,GACXkB,aAAc,IACdC,MAAO,CACLC,UAAW,SAAAC,GACT,EAAKpB,SAAS,CACZe,SAAS,GAAD,mBAAM,EAAKvB,MAAMuB,UAAjB,CAA2BK,OAGvCC,kBAAmB,WAAO,IAChB1B,EAAgB,EAAKH,MAArBG,YACR,EAAKK,SAAS,CACZsB,UAAW3B,EAAY4B,MAAMC,KAAK,SAAAC,GAChC,MAAyB,WAArBA,EAAEC,SAASlC,OAA4B,EAEpC,UAMhBmC,KAAK,SAAAhC,GACJ,IAAMiC,EACJjC,EAAYkC,YAAclC,EAAYkC,WAAWC,gBAC7CnC,EAAYkC,WAAWlB,QAAQoB,OAC7B,SAAAhC,GAAE,OAAIA,IAAOL,EAAYK,KACzB,GACFJ,EAAYkB,KAElB,EAAKb,SAAS,CACZL,cACA2B,UAAW3B,EAAY4B,MACvBS,MAAOtC,EAAYsC,MACnBJ,eAGHK,MAAM5B,QAAQ6B,OAGnB,SAASC,EAAiB9C,GAAQ,IAAD,OAC/BA,EAAMC,iBADyB,IAGvB8C,EAAW7C,KAAKC,MAAhB4C,OAEO,OAAXA,GAAqC,KAAlBA,EAAOxC,QAK9BL,KAAKS,SAAS,CACZqC,WAAW,IAGbC,IAAMC,KAAK,mCACRZ,KAAK,SAACJ,GACL,IAAIiB,EAAYjB,EAAMkB,KACtB,EAAKzC,SAAS,CACZuB,MAAOiB,MAIbF,IACGC,KAAK,8BAA+B,CAAEH,WACtCT,KAAK,WACJ,IAAMe,EAAgB,IAAIC,IAAQC,cAAc,CAC9CC,IAAK,uCASP,OANoB,IAAIF,IAAQG,YAAY,CAC1CC,gBAAiB,8CACjBX,SACAM,kBAICM,QAAQ,CACPC,cAAe,SAAAC,GAAS,IACdlB,EAAU,EAAKxC,MAAfwC,MACR,EAAKhC,SAAS,CACZgC,MAAM,GAAD,mBAAMA,GAAN,CAAakB,SAIvBvB,KAAK,SAAAjC,GACJ,EAAKM,SACH,CACEN,cACAyD,WAAW,EACXd,WAAW,EACXL,MAAOtC,EAAYsC,OAErB,kBAAMlB,EAAcsC,KAAK,SAIhCnB,MAAM5B,QAAQ6B,QAlDfmB,MAAM,kBAqDV,SAASC,EAAkBvD,GAAK,IAAD,EACER,KAAKC,MAA5BE,EADqB,EACrBA,YAAasC,EADQ,EACRA,MACfJ,EAAQ,UAAMlC,EAAYK,GAAlB,YAAwBA,GAEhCwD,EAAuBvB,EAAMD,OAAO,SAAAmB,GACxC,GAAIA,EAAKrB,YAAcqB,EAAKrB,WAAWC,gBAAiB,CACtD,IAAM0B,EAAM,CAAC9D,EAAYK,GAAIA,GACrBY,EAAYuC,EAAKrB,WAAjBlB,QAER,GAAI6C,EAAIhC,OAAOiC,KAAK,MAAQ9C,EAAQa,OAAOiC,KAAK,IAC9C,MAAO,CACLP,QAKN,OAAO,IAGT,OAAIK,EAAqBG,OAAS,EACzBC,QAAQC,QAAQL,EAAqB,IAGvC7D,EAAYmE,WAAW,CAC5BhD,KAAK,GAAD,OAAKe,GACTkC,SAAS,EACTC,WAAY,CAAC,GAAD,OAAIhE,IAChB8B,WAAY,CACVC,iBAAiB,EACjBnB,QAAS,CAACjB,EAAYK,GAAIA,MAKhC,SAASiE,IACP,IAAMnD,EAAOtB,KAAKC,MAAMyE,YAClBC,EAAM3E,KAAKC,MAAMmB,QAFE,EAGMpB,KAAKC,MAA5BE,EAHiB,EAGjBA,YAAasC,EAHI,EAGJA,MACfJ,EAAQ,UAAMf,GAEd0C,EAAuBvB,EAAMD,OAAO,SAAAmB,GACxC,GAAIA,EAAKrB,YAAcqB,EAAKrB,WAAWC,gBAAiB,CACtD,IAAM0B,EAAMU,EAAIC,OAAOzE,EAAYK,IAC3BY,EAAYuC,EAAKrB,WAAjBlB,QAER,GAAI6C,EAAIhC,OAAOiC,KAAK,MAAQ9C,EAAQa,OAAOiC,KAAK,IAC9C,MAAO,CACLP,QAKN,OAAO,IAGT,OAAIK,EAAqBG,OAAS,EACzBC,QAAQC,QAAQL,EAAqB,IAGvC7D,EAAYmE,WAAW,CAC5BhD,KAAMe,EACNkC,SAAS,EACTC,WAAYG,IAIhB,SAASE,EAAOrE,GAAK,IAAD,OAClBuD,EAAkBF,KAAK7D,KAAMQ,GAAI4B,KAAK,SAAAuB,GACpCpC,EAAcsC,KAAK,EAAMF,EAAKnD,MAIlC,SAASsE,IAAoB,IAAD,OAC1BL,EAAgBZ,KAAK7D,MAAMoC,KAAK,SAAAuB,GAC9BpC,EAAcsC,KAAK,EAAMF,EAAKnD,MCnOlC,IAmCeuE,EAnCA,SAAAC,GAAU,IACfnC,EAA0CmC,EAA1CnC,OAAQ5B,EAAkC+D,EAAlC/D,YAAa2B,EAAqBoC,EAArBpC,iBAE7B,OACE,yBAAKqC,UAAU,oBACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,cAAcC,SAAUtC,GACtC,2BAAOqC,UAAU,iBAAiBE,QAAQ,YAA1C,4BAGA,2BACE3E,GAAG,WACHyE,UAAU,iBACVG,WAAS,EACTC,KAAK,OACL/D,KAAK,SACLD,MAAOwB,EACPyC,SAAUrE,EACVsE,YAAY,wBAEd,4BAAQF,KAAK,SAASJ,UAAU,cAAhC,c,gBCWKO,EA/BQ,SAAAR,GAAU,IACvBF,EAA2EE,EAA3EF,iBAAkB9C,EAAyDgD,EAAzDhD,MAAOf,EAAkD+D,EAAlD/D,YAAayD,EAAqCM,EAArCN,YAAatD,EAAwB4D,EAAxB5D,QAASV,EAAesE,EAAftE,WAC9D+E,EAAUzD,EAAM0D,IAAI,SAASC,GACjC,MAAO,CAACrE,KAAMqE,EAAI,GAAQtE,MAAOsE,EAAI,MAGvC,OACE,6BAASV,UAAU,eACjB,2BAAOA,UAAU,iBAAiBE,QAAQ,YAA1C,sBAGA,2BACE3E,GAAG,OACH4E,WAAS,EACTC,KAAK,OACL/D,KAAK,cACLD,MAAOqD,EACPY,SAAUrE,EACVsE,YAAY,wBAEd,yBAAKN,UAAU,iBACb,kBAAC,IAAD,CAAaQ,QAASA,EAASnE,KAAK,UAAUD,MAAOD,EAASwE,gBAAiB3E,KAEhFG,EAAQ+C,OAAS,EAAK,4BAAQkB,KAAK,SAASJ,UAAU,aAAaY,QAAS,kBAAMf,MAA5D,UAEV,KACb,4BAAQe,QAAS,kBAAMnF,MAAvB,YCESoF,EA5Be,SAAAd,GAAU,IAC9BF,EAA8DE,EAA9DF,iBAAkB9C,EAA4CgD,EAA5ChD,MAA4B7B,GAAgB6E,EAArC/D,YAAqC+D,EAAxBe,OAAwBf,EAAhB7E,aAChD8C,EAAYjB,EAAM0D,IAAI,SAAAC,GAC1B,OACE,wBAAIV,UAAU,cAAce,IAAKL,EAAKrE,MACpC,6BACE,8BAAOqE,EAAKrE,OAEbnB,EAAYK,KAAOmF,EAAKnF,GACvB,4BACEqF,QAAS,kBAAMf,EAAiBa,EAAKnF,KACrCyF,MAAK,eAAUN,EAAKrE,KAAf,qBACL2D,UAAU,WAHZ,KAOE,QAKV,OACE,yBAAKA,UAAU,cACb,4BAAKhC,KCwDIiD,EA7EE,SAAAlB,GAAU,IACjBvC,EAAmLuC,EAAnLvC,MAAOrC,EAA4K4E,EAA5K5E,YAAamB,EAA+JyD,EAA/JzD,cAAepB,EAAgJ6E,EAAhJ7E,YAAa0E,EAAmIG,EAAnIH,OAAQC,EAA2HE,EAA3HF,iBAAkB9C,EAAyGgD,EAAzGhD,MAAOf,EAAkG+D,EAAlG/D,YAAayD,EAAqFM,EAArFN,YAAahE,EAAwEsE,EAAxEtE,WAAYC,EAA4DqE,EAA5DrE,SAAUS,EAAkD4D,EAAlD5D,QAAS2E,EAAyCf,EAAzCe,OAAQlF,EAAiCmE,EAAjCnE,WAAYD,EAAqBoE,EAArBpE,iBAChKuF,EAAgB,GAChBC,EAAsB,GA0B5B,OAzBA3D,EAAM4D,QAAQ,SAAA1C,GACZ,IAAM2C,EAAY3C,EAAK4C,UAAkB,GAAN,IAC7BC,EAAe7C,EAAKnD,KAAOJ,EAAYI,GAAK,SAAW,GACvDiG,EACJ,wBACExB,UAAWuB,EACXR,IAAKrC,EAAKnD,GACVqF,QAAS,kBAAMtE,EAAcoC,EAAKnD,MAElC,0BAAMyE,UAAU,aAAaqB,GAC5B3C,EAAKrB,YAAcqB,EAAKrB,WAAWC,gBAClC,0BAAM0C,UAAU,aACbtB,EAAKrB,WAAWlB,QAAQoB,OAAO,SAAAhC,GAAE,OAAIA,IAAOL,EAAYK,KAAI,IAG/D,0BAAMyE,UAAU,aAAatB,EAAKrC,OAIrCqC,EAAKrB,YAAcqB,EAAKrB,WAAWC,gBACpC6D,EAAoBM,KAAKD,GAEzBN,EAAcO,KAAKD,KAIrB,yBAAKxB,UAAU,SACb,yBAAKA,UAAU,WACb,sCAEE,0BAAMA,UAAU,eACd,uBACEY,QAAS,kBAAMnF,MADjB,QAMDC,EACE,kBAAC,EAAD,CAAgBmE,iBAAkBA,EAAkB9C,MAAOA,EAAOf,YAAaA,EAAayD,YAAaA,EAAatD,QAASA,EAASP,WAAYA,EAAYH,WAAYA,IAAiB,MAGlM,wBAAIuE,UAAU,cAAckB,IAE9B,yBAAKlB,UAAU,WACb,6CAEE,0BAAMA,UAAU,eACd,uBACEY,QAAS,kBAAMjF,MADjB,QAMDC,EACE,kBAAC,EAAD,CAAuBiE,iBAAkBD,EAAQ7C,MAAOA,EAAOf,YAAaA,EAAa8E,OAAQA,EAAQ5F,YAAaA,IAAkB,MAG7I,wBAAI8E,UAAU,cAAcmB,M,QCzCrBO,EArBK,SAAA3B,GAElB,OADqBA,EAAbxD,SACQkE,IAAI,SAAA7D,GAClB,IAAM+E,EAAOC,YAAO,IAAIC,KAAJ,UAAYjF,EAAQkF,YAAc,SAEtD,OACE,wBAAI9B,UAAU,UAAUe,IAAKnE,EAAQrB,IACnC,6BACE,0BAAMyE,UAAU,WAAWpD,EAAQmF,UACnC,8BAAOnF,EAAQvB,OAEjB,0BAAM2E,UAAU,gBAAgB2B,OCuBzBK,EAnCG,SAAAjC,GAAU,IAClBjD,EAAmCiD,EAAnCjD,UAAW8C,EAAwBG,EAAxBH,OAAQ1E,EAAgB6E,EAAhB7E,YACrB6B,EAAQD,EAAU2D,IAAI,SAAAC,GAC1B,OACE,wBAAIV,UAAU,cAAce,IAAKL,EAAKnF,IACpC,6BACE,0BAAMyE,UAAS,mBAAcU,EAAKxD,SAASlC,SAC3C,8BAAO0F,EAAKrE,OAEbnB,EAAYK,KAAOmF,EAAKnF,GACvB,4BACEqF,QAAS,kBAAMhB,EAAOc,EAAKnF,KAC3ByF,MAAK,eAAUN,EAAKrE,KAAf,qBACL2D,UAAU,WAHZ,KAOE,QAKV,OACE,yBAAKA,UAAU,cACb,4BAAKjD,KCkHIkF,G,8BAxHb,aAAe,IAAD,8BACZ,+CACKjH,MAAQ,CACX4C,OAAQ,GACRb,MAAO,GACP4B,WAAW,EACXd,WAAW,EACX3C,YAAa,KACbC,YAAa,KACbqC,MAAO,GACPV,UAAW,GACXM,SAAU,KACVb,SAAU,GACVtB,WAAY,GACZwE,YAAa,GACb/D,UAAU,EACVS,QAAS,GACT2E,OAAQ,GACRlF,YAAY,GAGd,EAAKI,YAAcA,EAAYkG,KAAZ,gBACnB,EAAKvE,iBAAmBA,EAAiBuE,KAAjB,gBACxB,EAAK5F,cAAgBA,EAAc4F,KAAd,gBACrB,EAAKtH,YAAcA,EAAYsH,KAAZ,gBACnB,EAAKtC,OAASA,EAAOsC,KAAP,gBACd,EAAKrC,iBAAmBA,EAAiBqC,KAAjB,gBACxB,EAAKzG,WAAaA,EAAWyG,KAAX,gBAClB,EAAKvG,iBAAmBA,EAAiBuG,KAAjB,gBA5BZ,E,sEA+BJ,IAAD,EAiBHnH,KAAKC,MAfP4C,EAFK,EAELA,OACAb,EAHK,EAGLA,MACA4B,EAJK,EAILA,UACAnB,EALK,EAKLA,MACArC,EANK,EAMLA,YACAD,EAPK,EAOLA,YACAqB,EARK,EAQLA,SACAtB,EATK,EASLA,WACA6B,EAVK,EAULA,UACAM,EAXK,EAWLA,SACAqC,EAZK,EAYLA,YACA/D,EAbK,EAaLA,SACAS,EAdK,EAcLA,QACA2E,EAfK,EAeLA,OACAlF,EAhBK,EAgBLA,WAGF,OACE,yBAAKoE,UAAU,OACb,2BAAOA,UAAU,wBACd9E,EACC,yBAAK8E,UAAU,gBACb,0BAAMA,UAAU,YAAY9E,EAAYmB,MACxC,0BAAM2D,UAAU,WAAhB,WAA+B9E,EAAYK,MAE3C,KACHJ,EACC,kBAAC,EAAD,CACEqC,MAAOA,EACPrC,YAAaA,EACbmB,cAAevB,KAAKuB,cACpBpB,YAAaA,EACb2E,iBAAkB9E,KAAK8E,iBACvBD,OAAQ7E,KAAK6E,OACb7C,MAAOA,EACPf,YAAajB,KAAKiB,YAClByD,YAAaA,EACbhE,WAAYV,KAAKU,WACjBC,SAAUA,EACVS,QAASA,EACT2E,OAAQA,EACRlF,WAAYA,EACZD,iBAAkBZ,KAAKY,mBAEvB,MAEN,6BAASqE,UAAU,eACjB,4BAAQA,UAAU,eACf7E,EAAc,4BAAKiC,GAAiB,MAEvC,wBAAI4C,UAAU,iBACZ,kBAAC,EAAD,CAAazD,SAAUA,KAEzB,4BAAQyD,UAAU,eAChB,0BAAMC,SAAUlF,KAAKH,YAAaoF,UAAU,gBAC1C,2BACEI,KAAK,OACLhE,MAAOnB,EACPoB,KAAK,aACL2D,UAAU,gBACVM,YAAY,0CACZD,SAAUtF,KAAKiB,iBAKvB,2BAAOgE,UAAU,yBACd7E,EACC,kBAAC,EAAD,CACED,YAAaA,EACb0E,OAAQ7E,KAAK6E,OACb9C,UAAWA,IAEX,MAEL6B,EACC,kBAAC,EAAD,CACEf,OAAQA,EACR5B,YAAajB,KAAKiB,YAClB2B,iBAAkB5C,KAAK4C,mBAEvB,U,GAnHMwE,cCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5F,KAAK,SAAA6F,GACjCA,EAAaC,iB","file":"static/js/main.f0a244a4.chunk.js","sourcesContent":["import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const { newMessage, currentUser, currentRoom } = this.state;\n\n  if (newMessage.trim() === '') return;\n\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: `${currentRoom.id}`,\n  });\n\n  this.setState({\n    newMessage: '',\n  });\n}\n\nfunction toggleShow(){\n  const {showForm} = this.state;\n  this.setState({\n    showForm: !showForm\n  });\n}\n\nfunction toggleShowDmList(){\n  const {showForm} = this.state;\n  this.setState({\n    showDmList: !showForm\n  });\n  console.log(this.ShowDmList)\n}\n\nfunction handleInput(event) {\n  if(event.target === undefined){\n    console.log(event)\n    this.setState({\n      userIds: event,\n    });\n  }else{\n    const { value, name } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n}\n\nfunction connectToRoom(id = 'afa1c12e-b196-4bb4-b940-a1af439328be') {\n  const { currentUser } = this.state;\n\n  this.setState({\n    messages: [],\n    showForm: false,\n    showDmList: false\n  });\n\n  return currentUser\n    .subscribeToRoom({\n      roomId: `${id}`,\n      messageLimit: 100,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message],\n          });\n        },\n        onPresenceChanged: () => {\n          const { currentRoom } = this.state;\n          this.setState({\n            roomUsers: currentRoom.users.sort(a => {\n              if (a.presence.state === 'online') return -1;\n\n              return 1;\n            }),\n          });\n        },\n      },\n    })\n    .then(currentRoom => {\n      const roomName =\n        currentRoom.customData && currentRoom.customData.isDirectMessage\n          ? currentRoom.customData.userIds.filter(\n              id => id !== currentUser.id\n            )[0]\n          : currentRoom.name;\n\n      this.setState({\n        currentRoom,\n        roomUsers: currentRoom.users,\n        rooms: currentUser.rooms,\n        roomName,\n      });\n    })\n    .catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n\n  const { userId } = this.state;\n\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  this.setState({\n    isLoading: true,\n  });\n\n  axios.post('http://localhost:5200/get_users')\n    .then((users) => {\n      let user_list = users.data\n      this.setState({\n        users: user_list\n      });\n    })\n\n  axios\n    .post('http://localhost:5200/users', { userId })\n    .then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: 'http://localhost:5200/authenticate',\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:4811d398-69b5-472e-bfcf-e24d61e97f14',\n        userId,\n        tokenProvider,\n      });\n\n      return chatManager\n        .connect({\n          onAddedToRoom: room => {\n            const { rooms } = this.state;\n            this.setState({\n              rooms: [...rooms, room],\n            });\n          },\n        })\n        .then(currentUser => {\n          this.setState(\n            {\n              currentUser,\n              showLogin: false,\n              isLoading: false,\n              rooms: currentUser.rooms\n            },\n            () => connectToRoom.call(this)\n          );\n        });\n    })\n    .catch(console.error);\n}\n\nfunction createPrivateRoom(id) {\n  const { currentUser, rooms } = this.state;\n  const roomName = `${currentUser.id}_${id}`;\n\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const { userIds } = room.customData;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room,\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: `${roomName}`,\n    private: true,\n    addUserIds: [`${id}`],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id],\n    },\n  });\n}\n\nfunction createGroupRoom() {\n  const name = this.state.channelName;\n  const ids = this.state.userIds;\n  const { currentUser, rooms } = this.state;\n  const roomName = `${name}`;\n\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = ids.concat(currentUser.id);\n      const { userIds } = room.customData;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room,\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: roomName,\n    private: true,\n    addUserIds: ids\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nfunction sendGroupMessage() {\n  createGroupRoom.call(this).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nexport { sendMessage, handleInput, connectToRoom, connectToChatkit, sendDM, sendGroupMessage, toggleShow, toggleShowDmList };\n","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst Dialog = props => {\n  const { userId, handleInput, connectToChatkit } = props;\n\n  return (\n    <div className=\"dialog-container\">\n      <div className=\"dialog\">\n        <form className=\"dialog-form\" onSubmit={connectToChatkit}>\n          <label className=\"username-label\" htmlFor=\"username\">\n            Login with your username\n          </label>\n          <input\n            id=\"username\"\n            className=\"username-input\"\n            autoFocus\n            type=\"text\"\n            name=\"userId\"\n            value={userId}\n            onChange={handleInput}\n            placeholder=\"Enter your username\"\n          />\n          <button type=\"submit\" className=\"submit-btn\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nDialog.propTypes = {\n  userId: Proptypes.string.isRequired,\n  handleInput: Proptypes.func.isRequired,\n  connectToChatkit: Proptypes.func.isRequired,\n};\n\nexport default Dialog;\n","import React from 'react'\nimport Multiselect from 'multiselect-dropdown-react';\n\nconst CreateRoomForm = props => {\n  const { sendGroupMessage, users, handleInput, channelName, userIds, toggleShow } = props;\n  const options = users.map(function(user){\n    return {name: user[\"id\"], value: user['id']}\n  })\n\n  return (\n    <section className=\"chat-screen\">\n      <label className=\"username-label\" htmlFor=\"username\">\n        Group Channel Name\n      </label>\n      <input\n        id=\"name\"\n        autoFocus\n        type=\"text\"\n        name=\"channelName\"\n        value={channelName}\n        onChange={handleInput}\n        placeholder=\"Enter your username\"\n      />\n      <div className=\"custom-select\">\n        <Multiselect options={options} name=\"userIds\" value={userIds} onSelectOptions={handleInput} />\n      </div>\n      {userIds.length > 0 ? (<button type=\"submit\" className=\"submit-btn\" onClick={() => sendGroupMessage()}>\n        Submit\n      </button>) : null}\n      <button onClick={() => toggleShow()}>Cancel</button>\n    </section>\n  );\n};\n\nexport default CreateRoomForm;\n","import React from 'react'\nimport Multiselect from 'multiselect-dropdown-react';\n\nconst CreatePrivateRoomForm = props => {\n  const { sendGroupMessage, users, handleInput, dmUser, currentUser } = props;\n  const user_list = users.map(user => {\n    return (\n      <li className=\"room-member\" key={user.name}>\n        <div>\n          <span>{user.name}</span>\n        </div>\n        {currentUser.id !== user.id ? (\n          <button\n            onClick={() => sendGroupMessage(user.id)}\n            title={`Send ${user.name} a direct message`}\n            className=\"send-dm\"\n          >\n            +\n          </button>\n        ) : null}\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"room-users\">\n      <ul>{user_list}</ul>\n    </div>\n  );\n};\n\nexport default CreatePrivateRoomForm;\n","import React from 'react';\nimport Proptypes from 'prop-types';\nimport CreateRoomForm from './CreateRoomForm';\nimport CreatePrivateRoomForm from './CreatePrivateRoomForm';\n\nconst RoomList = props => {\n  const { rooms, currentRoom, connectToRoom, currentUser, sendDM, sendGroupMessage, users, handleInput, channelName, toggleShow, showForm, userIds, dmUser, showDmList, toggleShowDmList } = props;\n  const groupRoomList = []\n  const privateChatRoomList = []\n  rooms.forEach(room => {\n    const roomIcon = !room.isPrivate ? '#' : '';\n    const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n    const chat_list_name = (\n      <li\n        className={isRoomActive}\n        key={room.id}\n        onClick={() => connectToRoom(room.id)}\n      >\n        <span className=\"room-icon\">{roomIcon}</span>\n        {room.customData && room.customData.isDirectMessage ? (\n          <span className=\"room-name\">\n            {room.customData.userIds.filter(id => id !== currentUser.id)[0]}\n          </span>\n        ) : (\n          <span className=\"room-name\">{room.name}</span>\n        )}\n      </li>\n    );\n    if(room.customData && room.customData.isDirectMessage){\n      privateChatRoomList.push(chat_list_name)\n    }else{\n      groupRoomList.push(chat_list_name)\n    }\n  });\n  return (\n    <div className=\"rooms\">\n      <div className=\"section\">\n        <div>\n          Groups\n          <span className=\"create-conv\">\n            <a\n              onClick={() => toggleShow()}\n            >\n            Add\n            </a>\n          </span>\n          {showForm ?\n            (<CreateRoomForm sendGroupMessage={sendGroupMessage} users={users} handleInput={handleInput} channelName={channelName} userIds={userIds} showDmList={showDmList} toggleShow={toggleShow}/>) : null\n          }\n        </div>\n        <ul className=\"chat-rooms\">{groupRoomList}</ul>\n      </div>\n      <div className=\"section\">\n        <div>\n          Private Chats\n          <span className=\"create-conv\">\n            <a\n              onClick={() => toggleShowDmList()}\n            >\n            Add\n            </a>\n          </span>\n          {showDmList ?\n            (<CreatePrivateRoomForm sendGroupMessage={sendDM} users={users} handleInput={handleInput} dmUser={dmUser} currentUser={currentUser}/>) : null\n          }\n        </div>\n        <ul className=\"chat-rooms\">{privateChatRoomList}</ul>\n      </div>\n    </div>\n  );\n};\n\nRoomList.propTypes = {\n  rooms: Proptypes.array.isRequired,\n  currentRoom: Proptypes.object.isRequired,\n  connectToRoom: Proptypes.func.isRequired,\n  currentUser: Proptypes.object.isRequired,\n  sendDM: Proptypes.func.isRequired,\n  sendGroupMessage: Proptypes.func.isRequired,\n  handleInput: Proptypes.func.isRequired,\n};\n\nexport default RoomList;\n","import React from 'react';\nimport Proptypes from 'prop-types';\nimport { format } from 'date-fns';\n\nconst ChatSession = props => {\n  const { messages } = props;\n  return messages.map(message => {\n    const time = format(new Date(`${message.updatedAt}`), 'HH:mm');\n\n    return (\n      <li className=\"message\" key={message.id}>\n        <div>\n          <span className=\"user-id\">{message.senderId}</span>\n          <span>{message.text}</span>\n        </div>\n        <span className=\"message-time\">{time}</span>\n      </li>\n    );\n  });\n};\n\nChatSession.propTypes = {\n  messages: Proptypes.arrayOf(Proptypes.object).isRequired,\n};\n\nexport default ChatSession;\n\n","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst RoomUsers = props => {\n  const { roomUsers, sendDM, currentUser } = props;\n  const users = roomUsers.map(user => {\n    return (\n      <li className=\"room-member\" key={user.id}>\n        <div>\n          <span className={`presence ${user.presence.state}`} />\n          <span>{user.name}</span>\n        </div>\n        {currentUser.id !== user.id ? (\n          <button\n            onClick={() => sendDM(user.id)}\n            title={`Send ${user.name} a direct message`}\n            className=\"send-dm\"\n          >\n            +\n          </button>\n        ) : null}\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"room-users\">\n      <ul>{users}</ul>\n    </div>\n  );\n};\n\nRoomUsers.propTypes = {\n  roomUsers: Proptypes.array.isRequired,\n  sendDM: Proptypes.func.isRequired,\n  currentUser: Proptypes.object.isRequired,\n};\n\nexport default RoomUsers;\n","import React, { Component } from 'react';\nimport {\n  handleInput,\n  connectToChatkit,\n  connectToRoom,\n  sendMessage,\n  sendDM,\n  sendGroupMessage,\n  toggleShow,\n  toggleShowDmList\n} from './helper';\nimport Dialog from './components/Dialog';\nimport RoomList from './components/RoomList';\nimport ChatSession from './components/ChatSession';\nimport RoomUsers from './components/RoomUsers';\n\nimport 'skeleton-css/css/normalize.css';\nimport 'skeleton-css/css/skeleton.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: '',\n      users: [],\n      showLogin: true,\n      isLoading: false,\n      currentUser: null,\n      currentRoom: null,\n      rooms: [],\n      roomUsers: [],\n      roomName: null,\n      messages: [],\n      newMessage: '',\n      channelName: '',\n      showForm: false,\n      userIds: [],\n      dmUser: '',\n      showDmList: false\n    };\n\n    this.handleInput = handleInput.bind(this);\n    this.connectToChatkit = connectToChatkit.bind(this);\n    this.connectToRoom = connectToRoom.bind(this);\n    this.sendMessage = sendMessage.bind(this);\n    this.sendDM = sendDM.bind(this);\n    this.sendGroupMessage = sendGroupMessage.bind(this);\n    this.toggleShow = toggleShow.bind(this);\n    this.toggleShowDmList = toggleShowDmList.bind(this);\n  }\n\n  render() {\n    const {\n      userId,\n      users,\n      showLogin,\n      rooms,\n      currentRoom,\n      currentUser,\n      messages,\n      newMessage,\n      roomUsers,\n      roomName,\n      channelName,\n      showForm,\n      userIds,\n      dmUser,\n      showDmList\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <aside className=\"sidebar left-sidebar\">\n          {currentUser ? (\n            <div className=\"user-profile\">\n              <span className=\"username\">{currentUser.name}</span>\n              <span className=\"user-id\">{`@${currentUser.id}`}</span>\n            </div>\n          ) : null}\n          {currentRoom ? (\n            <RoomList\n              rooms={rooms}\n              currentRoom={currentRoom}\n              connectToRoom={this.connectToRoom}\n              currentUser={currentUser}\n              sendGroupMessage={this.sendGroupMessage}\n              sendDM={this.sendDM}\n              users={users}\n              handleInput={this.handleInput}\n              channelName={channelName}\n              toggleShow={this.toggleShow}\n              showForm={showForm}\n              userIds={userIds}\n              dmUser={dmUser}\n              showDmList={showDmList}\n              toggleShowDmList={this.toggleShowDmList}\n            />\n          ) : null}\n        </aside>\n        <section className=\"chat-screen\">\n          <header className=\"chat-header\">\n            {currentRoom ? <h3>{roomName}</h3> : null}\n          </header>\n          <ul className=\"chat-messages\">\n            <ChatSession messages={messages} />\n          </ul>\n          <footer className=\"chat-footer\">\n            <form onSubmit={this.sendMessage} className=\"message-form\">\n              <input\n                type=\"text\"\n                value={newMessage}\n                name=\"newMessage\"\n                className=\"message-input\"\n                placeholder=\"Type your message and hit ENTER to send\"\n                onChange={this.handleInput}\n              />\n            </form>\n          </footer>\n        </section>\n        <aside className=\"sidebar right-sidebar\">\n          {currentRoom ? (\n            <RoomUsers\n              currentUser={currentUser}\n              sendDM={this.sendDM}\n              roomUsers={roomUsers}\n            />\n          ) : null}\n        </aside>\n        {showLogin ? (\n          <Dialog\n            userId={userId}\n            handleInput={this.handleInput}\n            connectToChatkit={this.connectToChatkit}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}