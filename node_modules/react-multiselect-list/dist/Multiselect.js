import _toConsumableArray from "/home/dev/Code/react-multiselect-list/node_modules/@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "/home/dev/Code/react-multiselect-list/node_modules/@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "/home/dev/Code/react-multiselect-list/node_modules/@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "/home/dev/Code/react-multiselect-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "/home/dev/Code/react-multiselect-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "/home/dev/Code/react-multiselect-list/node_modules/@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import './Multiselect.css';
export var Multiselect =
/*#__PURE__*/
function (_Component) {
  _inherits(Multiselect, _Component);

  function Multiselect(props) {
    var _this;

    _classCallCheck(this, Multiselect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Multiselect).call(this, props));
    var selected = props.selected,
        list = props.list;
    list = list.map(function (e) {
      var s = {
        value: e,
        selected: false
      };

      if (selected && selected.indexOf(e) > -1) {
        s.selected = true;
      }

      return s;
    });
    _this.state = {
      values: _toConsumableArray(list),
      selectedValues: selected || [],
      searched: [],
      allSelected: false
    };

    if (selected.length) {
      props.onSelectItem(_this.state.selectedValues);
    }

    return _this;
  }

  _createClass(Multiselect, [{
    key: "selectValue",
    value: function selectValue(item) {
      var _this2 = this;

      if (item.selected) {
        var newItems = this.state.selectedValues.filter(function (e) {
          return e !== item.value;
        });
        this.setState({
          selectedValues: newItems,
          allSelected: false
        }, function () {
          _this2.props.onSelectItem(_this2.state.selectedValues);
        });
      } else {
        this.setState({
          selectedValues: _toConsumableArray(this.state.selectedValues).concat([item.value])
        }, function () {
          _this2.props.onSelectItem(_this2.state.selectedValues);
        });
      }

      item.selected = !item.selected;
      this.setState(function (state) {
        return {
          values: state.values
        };
      });
    }
  }, {
    key: "searchText",
    value: function searchText() {
      var _this3 = this;

      var values = this.state.values;
      var s = values.filter(function (e) {
        return e.value.toLowerCase().indexOf(_this3.textInput.value) > -1;
      });
      this.setState({
        searched: s
      });
    }
  }, {
    key: "checkAll",
    value: function checkAll() {
      var _this4 = this;

      var _this$state = this.state,
          allSelected = _this$state.allSelected,
          values = _this$state.values;
      var onSelectItem = this.props.onSelectItem;
      var v = [];
      values.forEach(function (e) {
        if (allSelected) e.selected = false;else e.selected = true;

        if (e.selected) {
          v.push(e.value);
        }
      });
      this.setState({
        selectedValues: v,
        allSelected: !allSelected
      }, function () {
        onSelectItem(_this4.state.selectedValues);
      });
    }
  }, {
    key: "displayList",
    value: function displayList(e, i, theme) {
      return React.createElement("div", {
        key: i,
        className: e.selected ? theme + ' selected value' : theme + ' value',
        onClick: this.selectValue.bind(this, e)
      }, e.value);
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$state2 = this.state,
          values = _this$state2.values,
          searched = _this$state2.searched,
          allSelected = _this$state2.allSelected;
      var _this$props = this.props,
          title = _this$props.title,
          theme = _this$props.theme;
      return React.createElement("div", {
        className: "list"
      }, React.createElement("h1", {
        className: "title ".concat(theme)
      }, title), React.createElement("div", {
        className: "topbar"
      }, React.createElement("input", {
        className: "search-box",
        placeholder: "Search",
        onChange: this.searchText.bind(this),
        ref: function ref(input) {
          _this5.textInput = input;
        }
      }), !allSelected ? React.createElement("button", {
        className: "select-all ".concat(theme),
        onClick: this.checkAll.bind(this)
      }, "Select All") : React.createElement("button", {
        className: "deselect-all ".concat(theme),
        onClick: this.checkAll.bind(this)
      }, "Deselect All")), React.createElement("div", {
        className: "values"
      }, searched.length === 0 ? values.map(function (e, i) {
        return _this5.displayList(e, i, theme);
      }) : values.map(function (e, i) {
        return React.createElement("div", {
          key: i
        }, searched.indexOf(e) > -1 ? _this5.displayList(e, i, theme) : null);
      })));
    }
  }]);

  return Multiselect;
}(Component);