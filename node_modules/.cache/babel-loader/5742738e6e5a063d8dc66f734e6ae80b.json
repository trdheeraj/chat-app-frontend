{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _fuzzyMatchUtils = require('fuzzy-match-utils');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _selectItem = require('./select-item.js');\n\nvar _selectItem2 = _interopRequireDefault(_selectItem);\n\nvar _selectList = require('./select-list.js');\n\nvar _selectList2 = _interopRequireDefault(_selectList);\n\nvar _getString = require('./get-string.js');\n\nvar _getString2 = _interopRequireDefault(_getString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * This component represents the entire panel which gets dropped down when the\n * user selects the component.  It encapsulates the search filter, the\n * Select-all item, and the list of options.\n */\n\n\nvar SelectPanel = function (_Component) {\n  _inherits(SelectPanel, _Component);\n\n  function SelectPanel() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, SelectPanel);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SelectPanel.__proto__ || Object.getPrototypeOf(SelectPanel)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      searchHasFocus: false,\n      searchText: \"\",\n      focusIndex: 0\n    }, _this.selectAll = function () {\n      var _this$props = _this.props,\n          onSelectedChanged = _this$props.onSelectedChanged,\n          options = _this$props.options;\n      var allValues = options.map(function (o) {\n        return o.value;\n      });\n      onSelectedChanged(allValues);\n    }, _this.selectNone = function () {\n      var onSelectedChanged = _this.props.onSelectedChanged;\n      onSelectedChanged([]);\n    }, _this.selectAllChanged = function (checked) {\n      if (checked) {\n        _this.selectAll();\n      } else {\n        _this.selectNone();\n      }\n    }, _this.handleSearchChange = function (e) {\n      _this.setState({\n        searchText: e.target.value,\n        focusIndex: -1\n      });\n    }, _this.handleItemClicked = function (index) {\n      _this.setState({\n        focusIndex: index\n      });\n    }, _this.clearSearch = function () {\n      _this.setState({\n        searchText: \"\"\n      });\n    }, _this.handleKeyDown = function (e) {\n      switch (e.which) {\n        case 38:\n          // Up Arrow\n          if (e.altKey) {\n            return;\n          }\n\n          _this.updateFocus(-1);\n\n          break;\n\n        case 40:\n          // Down Arrow\n          if (e.altKey) {\n            return;\n          }\n\n          _this.updateFocus(1);\n\n          break;\n\n        default:\n          return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    }, _this.handleSearchFocus = function (searchHasFocus) {\n      _this.setState({\n        searchHasFocus: searchHasFocus,\n        focusIndex: -1\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(SelectPanel, [{\n    key: 'allAreSelected',\n    value: function allAreSelected() {\n      var _props = this.props,\n          options = _props.options,\n          selected = _props.selected;\n      return options.length === selected.length;\n    }\n  }, {\n    key: 'filteredOptions',\n    value: function filteredOptions() {\n      var searchText = this.state.searchText;\n      var _props2 = this.props,\n          options = _props2.options,\n          customFilterOptions = _props2.filterOptions;\n      return customFilterOptions ? customFilterOptions(options, searchText) : (0, _fuzzyMatchUtils.filterOptions)(options, searchText);\n    }\n  }, {\n    key: 'updateFocus',\n    value: function updateFocus(offset) {\n      var focusIndex = this.state.focusIndex;\n      var options = this.props.options;\n      var newFocus = focusIndex + offset;\n      newFocus = Math.max(0, newFocus);\n      newFocus = Math.min(newFocus, options.length);\n      this.setState({\n        focusIndex: newFocus\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state = this.state,\n          focusIndex = _state.focusIndex,\n          searchHasFocus = _state.searchHasFocus;\n      var _props3 = this.props,\n          ItemRenderer = _props3.ItemRenderer,\n          selectAllLabel = _props3.selectAllLabel,\n          disabled = _props3.disabled,\n          disableSearch = _props3.disableSearch,\n          hasSelectAll = _props3.hasSelectAll,\n          overrideStrings = _props3.overrideStrings;\n      var selectAllOption = {\n        label: selectAllLabel || (0, _getString2.default)(\"selectAll\", overrideStrings),\n        value: \"\"\n      };\n      var focusedSearchStyle = searchHasFocus ? styles.searchFocused : undefined;\n      return _react2.default.createElement('div', {\n        className: 'select-panel',\n        style: styles.panel,\n        role: 'listbox',\n        onKeyDown: this.handleKeyDown\n      }, !disableSearch && _react2.default.createElement('div', {\n        style: styles.searchContainer\n      }, _react2.default.createElement('input', {\n        placeholder: (0, _getString2.default)(\"search\", overrideStrings),\n        type: 'text',\n        onChange: this.handleSearchChange,\n        style: _extends({}, styles.search, focusedSearchStyle),\n        onFocus: function onFocus() {\n          return _this2.handleSearchFocus(true);\n        },\n        onBlur: function onBlur() {\n          return _this2.handleSearchFocus(false);\n        }\n      })), hasSelectAll && _react2.default.createElement(_selectItem2.default, {\n        focused: focusIndex === 0,\n        checked: this.allAreSelected(),\n        option: selectAllOption,\n        onSelectionChanged: this.selectAllChanged,\n        onClick: function onClick() {\n          return _this2.handleItemClicked(0);\n        },\n        ItemRenderer: ItemRenderer,\n        disabled: disabled\n      }), _react2.default.createElement(_selectList2.default, _extends({}, this.props, {\n        options: this.filteredOptions(),\n        focusIndex: focusIndex - 1,\n        onClick: function onClick(e, index) {\n          return _this2.handleItemClicked(index + 1);\n        },\n        ItemRenderer: ItemRenderer,\n        disabled: disabled\n      })));\n    }\n  }]);\n\n  return SelectPanel;\n}(_react.Component);\n\nvar styles = {\n  panel: {\n    boxSizing: 'border-box'\n  },\n  search: {\n    display: \"block\",\n    maxWidth: \"100%\",\n    borderRadius: \"3px\",\n    boxSizing: 'border-box',\n    height: '30px',\n    lineHeight: '24px',\n    border: '1px solid',\n    borderColor: '#dee2e4',\n    padding: '10px',\n    width: \"100%\",\n    outline: \"none\"\n  },\n  searchFocused: {\n    borderColor: \"#78c008\"\n  },\n  searchContainer: {\n    width: \"100%\",\n    boxSizing: 'border-box',\n    padding: \"0.5em\"\n  }\n};\nexports.default = SelectPanel;","map":null,"metadata":{},"sourceType":"script"}