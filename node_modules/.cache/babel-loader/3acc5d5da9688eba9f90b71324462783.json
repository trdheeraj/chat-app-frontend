{"ast":null,"code":"import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const _this$state = this.state,\n        newMessage = _this$state.newMessage,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  if (newMessage.trim() === '') return;\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: \"\".concat(currentRoom.id)\n  });\n  this.setState({\n    newMessage: ''\n  });\n}\n\nfunction toggleShow() {\n  const show = this.showForm;\n  this.setState({\n    showForm: !show\n  });\n}\n\nfunction handleInput(event) {\n  if (event.target === undefined) {\n    console.log(event);\n    this.setState({\n      ['userIds']: event\n    });\n  } else {\n    const _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n}\n\nfunction connectToRoom(id = 'afa1c12e-b196-4bb4-b940-a1af439328be') {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoom({\n    roomId: \"\".concat(id),\n    messageLimit: 100,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n      },\n      onPresenceChanged: () => {\n        const currentRoom = this.state.currentRoom;\n        this.setState({\n          roomUsers: currentRoom.users.sort(a => {\n            if (a.presence.state === 'online') return -1;\n            return 1;\n          })\n        });\n      }\n    }\n  }).then(currentRoom => {\n    const roomName = currentRoom.customData && currentRoom.customData.isDirectMessage ? currentRoom.customData.userIds.filter(id => id !== currentUser.id)[0] : currentRoom.name;\n    this.setState({\n      currentRoom,\n      roomUsers: currentRoom.users,\n      rooms: currentUser.rooms,\n      roomName\n    });\n  }).catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  this.setState({\n    isLoading: true\n  });\n  axios.post('http://localhost:5200/get_users').then(users => {\n    let user_list = users.data;\n    console.log(user_list);\n    this.setState({\n      users: user_list\n    });\n  });\n  axios.post('http://localhost:5200/users', {\n    userId\n  }).then(() => {\n    const tokenProvider = new Chatkit.TokenProvider({\n      url: 'http://localhost:5200/authenticate'\n    });\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:4811d398-69b5-472e-bfcf-e24d61e97f14',\n      userId,\n      tokenProvider\n    });\n    return chatManager.connect({\n      onAddedToRoom: room => {\n        const rooms = this.state.rooms;\n        this.setState({\n          rooms: [...rooms, room]\n        });\n      }\n    }).then(currentUser => {\n      this.setState({\n        currentUser,\n        showLogin: false,\n        isLoading: false,\n        rooms: currentUser.rooms\n      }, () => connectToRoom.call(this));\n    });\n  }).catch(console.error);\n}\n\nfunction createPrivateRoom(id) {\n  const _this$state2 = this.state,\n        currentUser = _this$state2.currentUser,\n        rooms = _this$state2.rooms;\n  const roomName = \"\".concat(currentUser.id, \"_\").concat(id);\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const userIds = room.customData.userIds;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: \"\".concat(roomName),\n    private: true,\n    addUserIds: [\"\".concat(id)],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id]\n    }\n  });\n}\n\nfunction createGroupRoom() {\n  const name = this.state.channelName;\n  const ids = this.state.userIds;\n  const _this$state3 = this.state,\n        currentUser = _this$state3.currentUser,\n        rooms = _this$state3.rooms;\n  const roomName = \"\".concat(name);\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, ids];\n      const userIds = room.customData.userIds;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: \"\".concat(roomName),\n    private: true,\n    addUserIds: [\"\".concat(ids)]\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nfunction sendGroupMessage() {\n  createGroupRoom.call(this).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nexport { sendMessage, handleInput, connectToRoom, connectToChatkit, sendDM, sendGroupMessage, toggleShow };","map":{"version":3,"sources":["/Users/dheerajthasmaravindranath/hobby/chat-app/client/slack/src/helper.js"],"names":["Chatkit","axios","sendMessage","event","preventDefault","state","newMessage","currentUser","currentRoom","trim","text","roomId","id","setState","toggleShow","show","showForm","handleInput","target","undefined","console","log","value","name","connectToRoom","messages","subscribeToRoom","messageLimit","hooks","onMessage","message","onPresenceChanged","roomUsers","users","sort","a","presence","then","roomName","customData","isDirectMessage","userIds","filter","rooms","catch","error","connectToChatkit","userId","alert","isLoading","post","user_list","data","tokenProvider","TokenProvider","url","chatManager","ChatManager","instanceLocator","connect","onAddedToRoom","room","showLogin","call","createPrivateRoom","isPrivateChatCreated","arr","join","length","Promise","resolve","createRoom","private","addUserIds","createGroupRoom","channelName","ids","sendDM","sendGroupMessage"],"mappings":"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","sourcesContent":["import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const { newMessage, currentUser, currentRoom } = this.state;\n\n  if (newMessage.trim() === '') return;\n\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: `${currentRoom.id}`,\n  });\n\n  this.setState({\n    newMessage: '',\n  });\n}\n\nfunction toggleShow(){\n  const show = this.showForm\n  this.setState({\n    showForm: !show\n  });\n}\n\nfunction handleInput(event) {\n  if(event.target === undefined){\n    console.log(event)\n    this.setState({\n      ['userIds']: event,\n    });\n  }else{\n    const { value, name } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n}\n\nfunction connectToRoom(id = 'afa1c12e-b196-4bb4-b940-a1af439328be') {\n  const { currentUser } = this.state;\n\n  this.setState({\n    messages: [],\n  });\n\n  return currentUser\n    .subscribeToRoom({\n      roomId: `${id}`,\n      messageLimit: 100,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message],\n          });\n        },\n        onPresenceChanged: () => {\n          const { currentRoom } = this.state;\n          this.setState({\n            roomUsers: currentRoom.users.sort(a => {\n              if (a.presence.state === 'online') return -1;\n\n              return 1;\n            }),\n          });\n        },\n      },\n    })\n    .then(currentRoom => {\n      const roomName =\n        currentRoom.customData && currentRoom.customData.isDirectMessage\n          ? currentRoom.customData.userIds.filter(\n              id => id !== currentUser.id\n            )[0]\n          : currentRoom.name;\n\n      this.setState({\n        currentRoom,\n        roomUsers: currentRoom.users,\n        rooms: currentUser.rooms,\n        roomName,\n      });\n    })\n    .catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n\n  const { userId } = this.state;\n\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  this.setState({\n    isLoading: true,\n  });\n\n  axios.post('http://localhost:5200/get_users')\n    .then((users) => {\n      let user_list = users.data\n      console.log(user_list);\n      this.setState({\n        users: user_list\n      });\n    })\n\n  axios\n    .post('http://localhost:5200/users', { userId })\n    .then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: 'http://localhost:5200/authenticate',\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:4811d398-69b5-472e-bfcf-e24d61e97f14',\n        userId,\n        tokenProvider,\n      });\n\n      return chatManager\n        .connect({\n          onAddedToRoom: room => {\n            const { rooms } = this.state;\n            this.setState({\n              rooms: [...rooms, room],\n            });\n          },\n        })\n        .then(currentUser => {\n          this.setState(\n            {\n              currentUser,\n              showLogin: false,\n              isLoading: false,\n              rooms: currentUser.rooms\n            },\n            () => connectToRoom.call(this)\n          );\n        });\n    })\n    .catch(console.error);\n}\n\nfunction createPrivateRoom(id) {\n  const { currentUser, rooms } = this.state;\n  const roomName = `${currentUser.id}_${id}`;\n\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const { userIds } = room.customData;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room,\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: `${roomName}`,\n    private: true,\n    addUserIds: [`${id}`],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id],\n    },\n  });\n}\n\nfunction createGroupRoom() {\n  const name = this.state.channelName;\n  const ids = this.state.userIds;\n  const { currentUser, rooms } = this.state;\n  const roomName = `${name}`;\n\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, ids];\n      const { userIds } = room.customData;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room,\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: `${roomName}`,\n    private: true,\n    addUserIds: [`${ids}`]\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nfunction sendGroupMessage() {\n  createGroupRoom.call(this).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nexport { sendMessage, handleInput, connectToRoom, connectToChatkit, sendDM, sendGroupMessage, toggleShow };\n"]},"metadata":{},"sourceType":"module"}