{"ast":null,"code":"import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const _this$state = this.state,\n        newMessage = _this$state.newMessage,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  if (newMessage.trim() === '') return;\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: \"\".concat(currentRoom.id)\n  });\n  this.setState({\n    newMessage: ''\n  });\n}\n\nfunction toggleShow() {\n  const show = this.showForm;\n  this.setState({\n    showForm: !show\n  });\n}\n\nfunction handleInput(event) {\n  const _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToRoom(id = 'afa1c12e-b196-4bb4-b940-a1af439328be') {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoom({\n    roomId: \"\".concat(id),\n    messageLimit: 100,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n      },\n      onPresenceChanged: () => {\n        const currentRoom = this.state.currentRoom;\n        this.setState({\n          roomUsers: currentRoom.users.sort(a => {\n            if (a.presence.state === 'online') return -1;\n            return 1;\n          })\n        });\n      }\n    }\n  }).then(currentRoom => {\n    const roomName = currentRoom.customData && currentRoom.customData.isDirectMessage ? currentRoom.customData.userIds.filter(id => id !== currentUser.id)[0] : currentRoom.name;\n    this.setState({\n      currentRoom,\n      roomUsers: currentRoom.users,\n      rooms: currentUser.rooms,\n      roomName\n    });\n  }).catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  this.setState({\n    isLoading: true\n  });\n  axios.post('http://localhost:5200/get_users').then(users => {\n    let user_list = users.data;\n    console.log(user_list);\n    this.setState({\n      users: user_list\n    });\n  });\n  axios.post('http://localhost:5200/users', {\n    userId\n  }).then(() => {\n    const tokenProvider = new Chatkit.TokenProvider({\n      url: 'http://localhost:5200/authenticate'\n    });\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:4811d398-69b5-472e-bfcf-e24d61e97f14',\n      userId,\n      tokenProvider\n    });\n    return chatManager.connect({\n      onAddedToRoom: room => {\n        const rooms = this.state.rooms;\n        this.setState({\n          rooms: [...rooms, room]\n        });\n      }\n    }).then(currentUser => {\n      this.setState({\n        currentUser,\n        showLogin: false,\n        isLoading: false,\n        rooms: currentUser.rooms\n      }, () => connectToRoom.call(this));\n    });\n  }).catch(console.error);\n}\n\nfunction createPrivateRoom(id) {\n  const _this$state2 = this.state,\n        currentUser = _this$state2.currentUser,\n        rooms = _this$state2.rooms;\n  const roomName = \"\".concat(currentUser.id, \"_\").concat(id);\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const userIds = room.customData.userIds;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: \"\".concat(roomName),\n    private: true,\n    addUserIds: [\"\".concat(id)],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id]\n    }\n  });\n}\n\nfunction createGroupRoom(ids) {\n  const _this$state3 = this.state,\n        currentUser = _this$state3.currentUser,\n        rooms = _this$state3.rooms;\n  const roomName = \"\".concat(currentUser.id, \"_\").concat(ids);\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, ids];\n      const userIds = room.customData.userIds;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: \"\".concat(roomName),\n    private: true,\n    addUserIds: [\"\".concat(ids)]\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nfunction sendGroupMessage(ids) {\n  createGroupRoom.call(this, ids).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nexport { sendMessage, handleInput, connectToRoom, connectToChatkit, sendDM, sendGroupMessage, toggleShow };","map":{"version":3,"sources":["/Users/dheerajthasmaravindranath/hobby/chat-app/client/slack/src/helper.js"],"names":["Chatkit","axios","sendMessage","event","preventDefault","state","newMessage","currentUser","currentRoom","trim","text","roomId","id","setState","toggleShow","show","showForm","handleInput","target","value","name","connectToRoom","messages","subscribeToRoom","messageLimit","hooks","onMessage","message","onPresenceChanged","roomUsers","users","sort","a","presence","then","roomName","customData","isDirectMessage","userIds","filter","rooms","catch","console","error","connectToChatkit","userId","alert","isLoading","post","user_list","data","log","tokenProvider","TokenProvider","url","chatManager","ChatManager","instanceLocator","connect","onAddedToRoom","room","showLogin","call","createPrivateRoom","isPrivateChatCreated","arr","join","length","Promise","resolve","createRoom","private","addUserIds","createGroupRoom","ids","sendDM","sendGroupMessage"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,wBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BA,EAAAA,KAAK,CAACC,cAAN;AAD0B,sBAEuB,KAAKC,KAF5B;AAAA,QAElBC,UAFkB,eAElBA,UAFkB;AAAA,QAENC,WAFM,eAENA,WAFM;AAAA,QAEOC,WAFP,eAEOA,WAFP;AAI1B,MAAIF,UAAU,CAACG,IAAX,OAAsB,EAA1B,EAA8B;AAE9BF,EAAAA,WAAW,CAACL,WAAZ,CAAwB;AACtBQ,IAAAA,IAAI,EAAEJ,UADgB;AAEtBK,IAAAA,MAAM,YAAKH,WAAW,CAACI,EAAjB;AAFgB,GAAxB;AAKA,OAAKC,QAAL,CAAc;AACZP,IAAAA,UAAU,EAAE;AADA,GAAd;AAGD;;AAED,SAASQ,UAAT,GAAqB;AACnB,QAAMC,IAAI,GAAG,KAAKC,QAAlB;AACA,OAAKH,QAAL,CAAc;AACZG,IAAAA,QAAQ,EAAE,CAACD;AADC,GAAd;AAGD;;AAED,SAASE,WAAT,CAAqBd,KAArB,EAA4B;AAAA,wBACFA,KAAK,CAACe,MADJ;AAAA,QAClBC,KADkB,iBAClBA,KADkB;AAAA,QACXC,IADW,iBACXA,IADW;AAG1B,OAAKP,QAAL,CAAc;AACZ,KAACO,IAAD,GAAQD;AADI,GAAd;AAGD;;AAED,SAASE,aAAT,CAAuBT,EAAE,GAAG,sCAA5B,EAAoE;AAAA,QAC1DL,WAD0D,GAC1C,KAAKF,KADqC,CAC1DE,WAD0D;AAGlE,OAAKM,QAAL,CAAc;AACZS,IAAAA,QAAQ,EAAE;AADE,GAAd;AAIA,SAAOf,WAAW,CACfgB,eADI,CACY;AACfZ,IAAAA,MAAM,YAAKC,EAAL,CADS;AAEfY,IAAAA,YAAY,EAAE,GAFC;AAGfC,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAEC,OAAO,IAAI;AACpB,aAAKd,QAAL,CAAc;AACZS,UAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKjB,KAAL,CAAWiB,QAAf,EAAyBK,OAAzB;AADE,SAAd;AAGD,OALI;AAMLC,MAAAA,iBAAiB,EAAE,MAAM;AAAA,cACfpB,WADe,GACC,KAAKH,KADN,CACfG,WADe;AAEvB,aAAKK,QAAL,CAAc;AACZgB,UAAAA,SAAS,EAAErB,WAAW,CAACsB,KAAZ,CAAkBC,IAAlB,CAAuBC,CAAC,IAAI;AACrC,gBAAIA,CAAC,CAACC,QAAF,CAAW5B,KAAX,KAAqB,QAAzB,EAAmC,OAAO,CAAC,CAAR;AAEnC,mBAAO,CAAP;AACD,WAJU;AADC,SAAd;AAOD;AAfI;AAHQ,GADZ,EAsBJ6B,IAtBI,CAsBC1B,WAAW,IAAI;AACnB,UAAM2B,QAAQ,GACZ3B,WAAW,CAAC4B,UAAZ,IAA0B5B,WAAW,CAAC4B,UAAZ,CAAuBC,eAAjD,GACI7B,WAAW,CAAC4B,UAAZ,CAAuBE,OAAvB,CAA+BC,MAA/B,CACE3B,EAAE,IAAIA,EAAE,KAAKL,WAAW,CAACK,EAD3B,EAEE,CAFF,CADJ,GAIIJ,WAAW,CAACY,IALlB;AAOA,SAAKP,QAAL,CAAc;AACZL,MAAAA,WADY;AAEZqB,MAAAA,SAAS,EAAErB,WAAW,CAACsB,KAFX;AAGZU,MAAAA,KAAK,EAAEjC,WAAW,CAACiC,KAHP;AAIZL,MAAAA;AAJY,KAAd;AAMD,GApCI,EAqCJM,KArCI,CAqCEC,OAAO,CAACC,KArCV,CAAP;AAsCD;;AAED,SAASC,gBAAT,CAA0BzC,KAA1B,EAAiC;AAC/BA,EAAAA,KAAK,CAACC,cAAN;AAD+B,QAGvByC,MAHuB,GAGZ,KAAKxC,KAHO,CAGvBwC,MAHuB;;AAK/B,MAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACpC,IAAP,OAAkB,EAAzC,EAA6C;AAC3CqC,IAAAA,KAAK,CAAC,gBAAD,CAAL;AACA;AACD;;AAED,OAAKjC,QAAL,CAAc;AACZkC,IAAAA,SAAS,EAAE;AADC,GAAd;AAIA9C,EAAAA,KAAK,CAAC+C,IAAN,CAAW,iCAAX,EACGd,IADH,CACSJ,KAAD,IAAW;AACf,QAAImB,SAAS,GAAGnB,KAAK,CAACoB,IAAtB;AACAR,IAAAA,OAAO,CAACS,GAAR,CAAYF,SAAZ;AACA,SAAKpC,QAAL,CAAc;AACZiB,MAAAA,KAAK,EAAEmB;AADK,KAAd;AAGD,GAPH;AASAhD,EAAAA,KAAK,CACF+C,IADH,CACQ,6BADR,EACuC;AAAEH,IAAAA;AAAF,GADvC,EAEGX,IAFH,CAEQ,MAAM;AACV,UAAMkB,aAAa,GAAG,IAAIpD,OAAO,CAACqD,aAAZ,CAA0B;AAC9CC,MAAAA,GAAG,EAAE;AADyC,KAA1B,CAAtB;AAIA,UAAMC,WAAW,GAAG,IAAIvD,OAAO,CAACwD,WAAZ,CAAwB;AAC1CC,MAAAA,eAAe,EAAE,6CADyB;AAE1CZ,MAAAA,MAF0C;AAG1CO,MAAAA;AAH0C,KAAxB,CAApB;AAMA,WAAOG,WAAW,CACfG,OADI,CACI;AACPC,MAAAA,aAAa,EAAEC,IAAI,IAAI;AAAA,cACbpB,KADa,GACH,KAAKnC,KADF,CACbmC,KADa;AAErB,aAAK3B,QAAL,CAAc;AACZ2B,UAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ,EAAWoB,IAAX;AADK,SAAd;AAGD;AANM,KADJ,EASJ1B,IATI,CASC3B,WAAW,IAAI;AACnB,WAAKM,QAAL,CACE;AACEN,QAAAA,WADF;AAEEsD,QAAAA,SAAS,EAAE,KAFb;AAGEd,QAAAA,SAAS,EAAE,KAHb;AAIEP,QAAAA,KAAK,EAAEjC,WAAW,CAACiC;AAJrB,OADF,EAOE,MAAMnB,aAAa,CAACyC,IAAd,CAAmB,IAAnB,CAPR;AASD,KAnBI,CAAP;AAoBD,GAjCH,EAkCGrB,KAlCH,CAkCSC,OAAO,CAACC,KAlCjB;AAmCD;;AAED,SAASoB,iBAAT,CAA2BnD,EAA3B,EAA+B;AAAA,uBACE,KAAKP,KADP;AAAA,QACrBE,WADqB,gBACrBA,WADqB;AAAA,QACRiC,KADQ,gBACRA,KADQ;AAE7B,QAAML,QAAQ,aAAM5B,WAAW,CAACK,EAAlB,cAAwBA,EAAxB,CAAd;AAEA,QAAMoD,oBAAoB,GAAGxB,KAAK,CAACD,MAAN,CAAaqB,IAAI,IAAI;AAChD,QAAIA,IAAI,CAACxB,UAAL,IAAmBwB,IAAI,CAACxB,UAAL,CAAgBC,eAAvC,EAAwD;AACtD,YAAM4B,GAAG,GAAG,CAAC1D,WAAW,CAACK,EAAb,EAAiBA,EAAjB,CAAZ;AADsD,YAE9C0B,OAF8C,GAElCsB,IAAI,CAACxB,UAF6B,CAE9CE,OAF8C;;AAItD,UAAI2B,GAAG,CAAClC,IAAJ,GAAWmC,IAAX,CAAgB,EAAhB,MAAwB5B,OAAO,CAACP,IAAR,GAAemC,IAAf,CAAoB,EAApB,CAA5B,EAAqD;AACnD,eAAO;AACLN,UAAAA;AADK,SAAP;AAGD;AACF;;AAED,WAAO,KAAP;AACD,GAb4B,CAA7B;;AAeA,MAAII,oBAAoB,CAACG,MAArB,GAA8B,CAAlC,EAAqC;AACnC,WAAOC,OAAO,CAACC,OAAR,CAAgBL,oBAAoB,CAAC,CAAD,CAApC,CAAP;AACD;;AAED,SAAOzD,WAAW,CAAC+D,UAAZ,CAAuB;AAC5BlD,IAAAA,IAAI,YAAKe,QAAL,CADwB;AAE5BoC,IAAAA,OAAO,EAAE,IAFmB;AAG5BC,IAAAA,UAAU,EAAE,WAAI5D,EAAJ,EAHgB;AAI5BwB,IAAAA,UAAU,EAAE;AACVC,MAAAA,eAAe,EAAE,IADP;AAEVC,MAAAA,OAAO,EAAE,CAAC/B,WAAW,CAACK,EAAb,EAAiBA,EAAjB;AAFC;AAJgB,GAAvB,CAAP;AASD;;AAED,SAAS6D,eAAT,CAAyBC,GAAzB,EAA8B;AAAA,uBACG,KAAKrE,KADR;AAAA,QACpBE,WADoB,gBACpBA,WADoB;AAAA,QACPiC,KADO,gBACPA,KADO;AAE5B,QAAML,QAAQ,aAAM5B,WAAW,CAACK,EAAlB,cAAwB8D,GAAxB,CAAd;AAEA,QAAMV,oBAAoB,GAAGxB,KAAK,CAACD,MAAN,CAAaqB,IAAI,IAAI;AAChD,QAAIA,IAAI,CAACxB,UAAL,IAAmBwB,IAAI,CAACxB,UAAL,CAAgBC,eAAvC,EAAwD;AACtD,YAAM4B,GAAG,GAAG,CAAC1D,WAAW,CAACK,EAAb,EAAiB8D,GAAjB,CAAZ;AADsD,YAE9CpC,OAF8C,GAElCsB,IAAI,CAACxB,UAF6B,CAE9CE,OAF8C;;AAItD,UAAI2B,GAAG,CAAClC,IAAJ,GAAWmC,IAAX,CAAgB,EAAhB,MAAwB5B,OAAO,CAACP,IAAR,GAAemC,IAAf,CAAoB,EAApB,CAA5B,EAAqD;AACnD,eAAO;AACLN,UAAAA;AADK,SAAP;AAGD;AACF;;AAED,WAAO,KAAP;AACD,GAb4B,CAA7B;;AAeA,MAAII,oBAAoB,CAACG,MAArB,GAA8B,CAAlC,EAAqC;AACnC,WAAOC,OAAO,CAACC,OAAR,CAAgBL,oBAAoB,CAAC,CAAD,CAApC,CAAP;AACD;;AAED,SAAOzD,WAAW,CAAC+D,UAAZ,CAAuB;AAC5BlD,IAAAA,IAAI,YAAKe,QAAL,CADwB;AAE5BoC,IAAAA,OAAO,EAAE,IAFmB;AAG5BC,IAAAA,UAAU,EAAE,WAAIE,GAAJ;AAHgB,GAAvB,CAAP;AAKD;;AAED,SAASC,MAAT,CAAgB/D,EAAhB,EAAoB;AAClBmD,EAAAA,iBAAiB,CAACD,IAAlB,CAAuB,IAAvB,EAA6BlD,EAA7B,EAAiCsB,IAAjC,CAAsC0B,IAAI,IAAI;AAC5CvC,IAAAA,aAAa,CAACyC,IAAd,CAAmB,IAAnB,EAAyBF,IAAI,CAAChD,EAA9B;AACD,GAFD;AAGD;;AAED,SAASgE,gBAAT,CAA0BF,GAA1B,EAA+B;AAC7BD,EAAAA,eAAe,CAACX,IAAhB,CAAqB,IAArB,EAA2BY,GAA3B,EAAgCxC,IAAhC,CAAqC0B,IAAI,IAAI;AAC3CvC,IAAAA,aAAa,CAACyC,IAAd,CAAmB,IAAnB,EAAyBF,IAAI,CAAChD,EAA9B;AACD,GAFD;AAGD;;AAED,SAASV,WAAT,EAAsBe,WAAtB,EAAmCI,aAAnC,EAAkDuB,gBAAlD,EAAoE+B,MAApE,EAA4EC,gBAA5E,EAA8F9D,UAA9F","sourcesContent":["import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const { newMessage, currentUser, currentRoom } = this.state;\n\n  if (newMessage.trim() === '') return;\n\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: `${currentRoom.id}`,\n  });\n\n  this.setState({\n    newMessage: '',\n  });\n}\n\nfunction toggleShow(){\n  const show = this.showForm\n  this.setState({\n    showForm: !show\n  });\n}\n\nfunction handleInput(event) {\n  const { value, name } = event.target;\n\n  this.setState({\n    [name]: value,\n  });\n}\n\nfunction connectToRoom(id = 'afa1c12e-b196-4bb4-b940-a1af439328be') {\n  const { currentUser } = this.state;\n\n  this.setState({\n    messages: [],\n  });\n\n  return currentUser\n    .subscribeToRoom({\n      roomId: `${id}`,\n      messageLimit: 100,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message],\n          });\n        },\n        onPresenceChanged: () => {\n          const { currentRoom } = this.state;\n          this.setState({\n            roomUsers: currentRoom.users.sort(a => {\n              if (a.presence.state === 'online') return -1;\n\n              return 1;\n            }),\n          });\n        },\n      },\n    })\n    .then(currentRoom => {\n      const roomName =\n        currentRoom.customData && currentRoom.customData.isDirectMessage\n          ? currentRoom.customData.userIds.filter(\n              id => id !== currentUser.id\n            )[0]\n          : currentRoom.name;\n\n      this.setState({\n        currentRoom,\n        roomUsers: currentRoom.users,\n        rooms: currentUser.rooms,\n        roomName,\n      });\n    })\n    .catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n\n  const { userId } = this.state;\n\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  this.setState({\n    isLoading: true,\n  });\n\n  axios.post('http://localhost:5200/get_users')\n    .then((users) => {\n      let user_list = users.data\n      console.log(user_list);\n      this.setState({\n        users: user_list\n      });\n    })\n\n  axios\n    .post('http://localhost:5200/users', { userId })\n    .then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: 'http://localhost:5200/authenticate',\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: 'v1:us1:4811d398-69b5-472e-bfcf-e24d61e97f14',\n        userId,\n        tokenProvider,\n      });\n\n      return chatManager\n        .connect({\n          onAddedToRoom: room => {\n            const { rooms } = this.state;\n            this.setState({\n              rooms: [...rooms, room],\n            });\n          },\n        })\n        .then(currentUser => {\n          this.setState(\n            {\n              currentUser,\n              showLogin: false,\n              isLoading: false,\n              rooms: currentUser.rooms\n            },\n            () => connectToRoom.call(this)\n          );\n        });\n    })\n    .catch(console.error);\n}\n\nfunction createPrivateRoom(id) {\n  const { currentUser, rooms } = this.state;\n  const roomName = `${currentUser.id}_${id}`;\n\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const { userIds } = room.customData;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room,\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: `${roomName}`,\n    private: true,\n    addUserIds: [`${id}`],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id],\n    },\n  });\n}\n\nfunction createGroupRoom(ids) {\n  const { currentUser, rooms } = this.state;\n  const roomName = `${currentUser.id}_${ids}`;\n\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, ids];\n      const { userIds } = room.customData;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room,\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: `${roomName}`,\n    private: true,\n    addUserIds: [`${ids}`]\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nfunction sendGroupMessage(ids) {\n  createGroupRoom.call(this, ids).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nexport { sendMessage, handleInput, connectToRoom, connectToChatkit, sendDM, sendGroupMessage, toggleShow };\n"]},"metadata":{},"sourceType":"module"}