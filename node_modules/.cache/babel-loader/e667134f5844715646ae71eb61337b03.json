{"ast":null,"code":"var _jsxFileName = \"/Users/dheerajthasmaravindranath/hobby/chat-app/client/slack/src/components/RoomList.js\";\nimport React from 'react';\nimport Proptypes from 'prop-types';\nimport CreateRoomForm from './CreateRoomForm';\n\nconst RoomList = props => {\n  const rooms = props.rooms,\n        currentRoom = props.currentRoom,\n        connectToRoom = props.connectToRoom,\n        currentUser = props.currentUser,\n        sendDM = props.sendDM,\n        sendGroupMessage = props.sendGroupMessage,\n        users = props.users,\n        handleInput = props.handleInput,\n        channelName = props.channelName,\n        toggleShow = props.toggleShow,\n        showForm = props.showForm;\n  const groupRoomList = [];\n  const privateChatRoomList = [];\n  rooms.forEach(room => {\n    const roomIcon = !room.isPrivate ? '#' : '';\n    const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n    const chat_list_name = React.createElement(\"li\", {\n      className: isRoomActive,\n      key: room.id,\n      onClick: () => connectToRoom(room.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"room-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, roomIcon), room.customData && room.customData.isDirectMessage ? React.createElement(\"span\", {\n      className: \"room-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, room.customData.userIds.filter(id => id !== currentUser.id)[0]) : React.createElement(\"span\", {\n      className: \"room-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, room.name));\n\n    if (room.customData && room.customData.isDirectMessage) {\n      privateChatRoomList.push(chat_list_name);\n    } else {\n      groupRoomList.push(chat_list_name);\n    }\n  });\n  return React.createElement(\"div\", {\n    className: \"rooms\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Groups\", React.createElement(\"button\", {\n    onClick: () => toggleShow(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Add\"), showForm ? React.createElement(CreateRoomForm, {\n    sendGroupMessage: sendGroupMessage,\n    users: users,\n    handleInput: handleInput,\n    channelName: channelName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }) : null), React.createElement(\"ul\", {\n    className: \"chat-rooms\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, groupRoomList)), React.createElement(\"div\", {\n    class: \"section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Direct Message\"), React.createElement(\"ul\", {\n    className: \"chat-rooms\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, privateChatRoomList)));\n};\n\nRoomList.propTypes = {\n  rooms: Proptypes.array.isRequired,\n  currentRoom: Proptypes.object.isRequired,\n  connectToRoom: Proptypes.func.isRequired,\n  currentUser: Proptypes.object.isRequired,\n  sendDM: Proptypes.func.isRequired,\n  sendGroupMessage: Proptypes.func.isRequired,\n  handleInput: Proptypes.func.isRequired\n};\nexport default RoomList;","map":{"version":3,"sources":["/Users/dheerajthasmaravindranath/hobby/chat-app/client/slack/src/components/RoomList.js"],"names":["React","Proptypes","CreateRoomForm","RoomList","props","rooms","currentRoom","connectToRoom","currentUser","sendDM","sendGroupMessage","users","handleInput","channelName","toggleShow","showForm","groupRoomList","privateChatRoomList","forEach","room","roomIcon","isPrivate","isRoomActive","id","chat_list_name","customData","isDirectMessage","userIds","filter","name","push","propTypes","array","isRequired","object","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Proptypes from 'prop-types';\nimport CreateRoomForm from './CreateRoomForm';\n\nconst RoomList = props => {\n  const { rooms, currentRoom, connectToRoom, currentUser, sendDM, sendGroupMessage, users, handleInput, channelName, toggleShow, showForm } = props;\n  const groupRoomList = []\n  const privateChatRoomList = []\n  rooms.forEach(room => {\n    const roomIcon = !room.isPrivate ? '#' : '';\n    const isRoomActive = room.id === currentRoom.id ? 'active' : '';\n    const chat_list_name = (\n      <li\n        className={isRoomActive}\n        key={room.id}\n        onClick={() => connectToRoom(room.id)}\n      >\n        <span className=\"room-icon\">{roomIcon}</span>\n        {room.customData && room.customData.isDirectMessage ? (\n          <span className=\"room-name\">\n            {room.customData.userIds.filter(id => id !== currentUser.id)[0]}\n          </span>\n        ) : (\n          <span className=\"room-name\">{room.name}</span>\n        )}\n      </li>\n    );\n    if(room.customData && room.customData.isDirectMessage){\n      privateChatRoomList.push(chat_list_name)\n    }else{\n      groupRoomList.push(chat_list_name)\n    }\n  });\n  return (\n    <div className=\"rooms\">\n      <div class=\"section\">\n        <div>\n          Groups\n          <button\n            onClick={() => toggleShow()}\n          >\n          Add\n          </button>\n          {showForm ?\n            (<CreateRoomForm sendGroupMessage={sendGroupMessage} users={users} handleInput={handleInput} channelName={channelName}/>) : null\n          }\n        </div>\n        <ul className=\"chat-rooms\">{groupRoomList}</ul>\n      </div>\n      <div class=\"section\">\n        <h5>Direct Message</h5>\n        <ul className=\"chat-rooms\">{privateChatRoomList}</ul>\n      </div>\n    </div>\n  );\n};\n\nRoomList.propTypes = {\n  rooms: Proptypes.array.isRequired,\n  currentRoom: Proptypes.object.isRequired,\n  connectToRoom: Proptypes.func.isRequired,\n  currentUser: Proptypes.object.isRequired,\n  sendDM: Proptypes.func.isRequired,\n  sendGroupMessage: Proptypes.func.isRequired,\n  handleInput: Proptypes.func.isRequired,\n};\n\nexport default RoomList;\n"]},"metadata":{},"sourceType":"module"}