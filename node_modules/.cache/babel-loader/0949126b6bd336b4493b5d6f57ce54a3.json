{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SelectItem = exports.SelectPanel = exports.Dropdown = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _dropdown = require('./dropdown.js');\n\nvar _dropdown2 = _interopRequireDefault(_dropdown);\n\nvar _selectPanel = require('./select-panel.js');\n\nvar _selectPanel2 = _interopRequireDefault(_selectPanel);\n\nvar _getString = require('./get-string.js');\n\nvar _getString2 = _interopRequireDefault(_getString);\n\nvar _selectItem = require('./select-item.js');\n\nvar _selectItem2 = _interopRequireDefault(_selectItem);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * This component is designed to be a multi-selct component which supports\n * the selection of several items in a picklist.  It was meant to mimic the\n * style of react-select but the multi-select behavior didn't work for our\n * our needs.\n *\n * Arguments:\n * - options: The {value, label}[] options to be displayed\n * - values: The currently selected values []\n * - onSelectedChanged: An event to notify the caller of new values\n * - valueRenderer: A fn to support overriding the message in the component\n * - isLoading: Show a loading indicator\n */\n\n\nvar MultiSelect = function (_Component) {\n  _inherits(MultiSelect, _Component);\n\n  function MultiSelect() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, MultiSelect);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MultiSelect.__proto__ || Object.getPrototypeOf(MultiSelect)).call.apply(_ref, [this].concat(args))), _this), _this.handleSelectedChanged = function (selected) {\n      var _this$props = _this.props,\n          onSelectedChanged = _this$props.onSelectedChanged,\n          disabled = _this$props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      if (onSelectedChanged) {\n        onSelectedChanged(selected);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(MultiSelect, [{\n    key: 'getSelectedText',\n    value: function getSelectedText() {\n      var _props = this.props,\n          options = _props.options,\n          selected = _props.selected;\n      var selectedOptions = selected.map(function (s) {\n        return options.find(function (o) {\n          return o.value === s;\n        });\n      });\n      var selectedLabels = selectedOptions.map(function (s) {\n        return s ? s.label : \"\";\n      });\n      return selectedLabels.join(\", \");\n    }\n  }, {\n    key: 'renderHeader',\n    value: function renderHeader() {\n      var _props2 = this.props,\n          options = _props2.options,\n          selected = _props2.selected,\n          valueRenderer = _props2.valueRenderer,\n          overrideStrings = _props2.overrideStrings;\n      var noneSelected = selected.length === 0;\n      var allSelected = selected.length === options.length;\n      var customText = valueRenderer && valueRenderer(selected, options);\n\n      if (noneSelected) {\n        return _react2.default.createElement('span', {\n          style: styles.noneSelected\n        }, customText || (0, _getString2.default)(\"selectSomeItems\", overrideStrings));\n      }\n\n      if (customText) {\n        return _react2.default.createElement('span', null, customText);\n      }\n\n      return _react2.default.createElement('span', null, allSelected ? (0, _getString2.default)(\"allItemsAreSelected\", overrideStrings) : this.getSelectedText());\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          ItemRenderer = _props3.ItemRenderer,\n          options = _props3.options,\n          selected = _props3.selected,\n          selectAllLabel = _props3.selectAllLabel,\n          isLoading = _props3.isLoading,\n          disabled = _props3.disabled,\n          disableSearch = _props3.disableSearch,\n          filterOptions = _props3.filterOptions,\n          shouldToggleOnHover = _props3.shouldToggleOnHover,\n          hasSelectAll = _props3.hasSelectAll,\n          overrideStrings = _props3.overrideStrings,\n          labelledBy = _props3.labelledBy;\n      return _react2.default.createElement('div', {\n        className: 'multi-select'\n      }, _react2.default.createElement(_dropdown2.default, {\n        isLoading: isLoading,\n        contentComponent: _selectPanel2.default,\n        shouldToggleOnHover: shouldToggleOnHover,\n        contentProps: {\n          ItemRenderer: ItemRenderer,\n          options: options,\n          selected: selected,\n          hasSelectAll: hasSelectAll,\n          selectAllLabel: selectAllLabel,\n          onSelectedChanged: this.handleSelectedChanged,\n          disabled: disabled,\n          disableSearch: disableSearch,\n          filterOptions: filterOptions,\n          overrideStrings: overrideStrings\n        },\n        disabled: disabled,\n        labelledBy: labelledBy\n      }, this.renderHeader()));\n    }\n  }]);\n\n  return MultiSelect;\n}(_react.Component);\n\nMultiSelect.defaultProps = {\n  hasSelectAll: true,\n  shouldToggleOnHover: false\n};\nvar styles = {\n  noneSelected: {\n    color: \"#aaa\"\n  }\n};\nexports.default = MultiSelect;\nexports.Dropdown = _dropdown2.default;\nexports.SelectPanel = _selectPanel2.default;\nexports.SelectItem = _selectItem2.default;","map":null,"metadata":{},"sourceType":"script"}